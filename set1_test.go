package cryptopals

import (
	"testing"
	"bytes"
	"encoding/hex"
	"sort"
)

func Test1_1(t *testing.T) {
	input := []byte{
		0x49, 0x27, 0x6d, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x72,
		0x61, 0x69, 0x6e, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x6f, 0x75,
		0x73, 0x20, 0x6d, 0x75, 0x73, 0x68,	0x72, 0x6f, 0x6f, 0x6d}

	output := hex2base64(input)

	if bytes.Compare(output, []byte("SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t")) != 0 {
		t.Errorf("Test failed, got: %s", output)
	}
}

func Test1_2(t *testing.T) {
	input := []byte{0x1c,0x01,0x11,0x00,0x1f,0x01,0x01,0x00,0x06,0x1a,0x02,0x4b,0x53,0x53,0x50,0x09,0x18,0x1c}
	key := []byte{0x68,0x69,0x74,0x20,0x74,0x68,0x65,0x20,0x62,0x75,0x6c,0x6c,0x27,0x73,0x20,0x65,0x79,0x65}

	output := fixedXor(input, key)

	if bytes.Compare(output, []byte{0x74,0x68,0x65,0x20,0x6b,0x69,0x64,0x20,0x64,0x6f,0x6e,0x27,0x74,0x20,0x70,0x6c,0x61,0x79}) != 0 {
		t.Errorf("Test failed, got: %s", hex.EncodeToString(output))
	}
}

func Test1_3(t *testing.T) {
	input := []byte{0x1b,0x37,0x37,0x33,0x31,0x36,0x3f,0x78,0x15,0x1b,0x7f,0x2b,0x78,0x34,0x31,0x33,0x3d,0x78,0x39,0x78,
		0x28,0x37,0x2d,0x36,0x3c,0x78,0x37,0x3e,0x78,0x3a,0x39,0x3b,0x37,0x36}

	t.Log(sortedByteDistribution(input))
	sort.Sort(sort.Reverse(sort.Float64Slice(charFreqs)))
	t.Log(charFreqs)

}